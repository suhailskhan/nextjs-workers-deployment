name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

concurrency:
  group: preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build:cloudflare

      - name: Deploy to Cloudflare Workers (Preview)
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          environment: preview

    #   - name: Comment preview URL on PR
    #     uses: actions/github-script@v7
    #     if: github.event_name == 'pull_request'
    #     with:
    #       script: |
    #         const { data: comments } = await github.rest.issues.listComments({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           issue_number: context.issue.number,
    #         });

    #         const botComment = comments.find(comment =>
    #           comment.user.type === 'Bot' && comment.body.includes('ðŸš€ Preview deployed!')
    #         );

    #         const commentBody = `ðŸš€ Preview deployed!

    #         **Preview URL**: https://nextjs-workers-deployment-preview.YOUR_SUBDOMAIN.workers.dev

    #         Built from commit: ${context.sha}`;

    #         if (botComment) {
    #           await github.rest.issues.updateComment({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             comment_id: botComment.id,
    #             body: commentBody
    #           });
    #         } else {
    #           await github.rest.issues.createComment({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             issue_number: context.issue.number,
    #             body: commentBody
    #           });
    #         }
